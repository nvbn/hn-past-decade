{"version":3,"sources":["data.ts","components/DashboardScreen/useStyles.ts","components/DashboardScreen/Header.tsx","components/DashboardScreen/Graph.tsx","components/DashboardScreen/Options.tsx","components/DashboardScreen/index.tsx","App.tsx","index.tsx"],"names":["urlPrefix","defaultKeywords","makeStyles","theme","root","display","flexDirection","h1","fontSize","panel","padding","spacing","main","marginTop","input","width","minWidth","plotContainer","height","toolbar","classes","useStyles","AppBar","position","Toolbar","className","Typography","variant","Button","href","tsKeywords","Paper","size","data","Object","keys","map","keyword","type","mode","name","x","created","y","layout","initialResolution","initialSelected","onResolutionChange","onSelectedChange","rankedKeywords","presets","useState","resolution","setResolution","changeResolution","useCallback","event","newResolution","target","value","selected","setSelected","changeSelected","values","changeSelectedPreset","FormControl","InputLabel","id","Select","labelId","onChange","MenuItem","label","options","displayEmpty","preset","location","useLocation","locationParams","URLSearchParams","search","res","get","kws","push","useHistory","setRankedKeywords","useEffect","a","async","fetch","response","json","fetchRankedKeyword","then","setPresets","fetchPresets","split","params","set","join","window","pathname","toString","setTSKeywords","undefined","keywords","result","encodeURIComponent","fetchTSKeywords","Header","Container","maxWidth","Grid","container","item","md","xs","Options","LinearProgress","Graph","App","children","DashboardScreen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94cbcbe0.chunk.js","sourcesContent":["export type TSEntry = [string, number];\n\nexport type TSKeywords = {\n  [keyword: string]: TSEntry[];\n};\n\nexport type RankedKeyword = [string, number];\n\nexport type Presets = {\n  [name: string]: string[];\n};\n\nexport const fetchRankedKeyword = async (): Promise<RankedKeyword[]> => {\n  const response = await fetch(`${urlPrefix}/dataset/hn/keywords.json`);\n\n  return await response.json();\n};\n\nconst urlPrefix =\n  process.env.NODE_ENV === \"production\" ? \"/hn-past-decade\" : \"\";\n\nexport const fetchTSKeywords = async (\n  resolution: string,\n  keywords: string[],\n): Promise<TSKeywords> => {\n  const result: TSKeywords = {};\n\n  for (const keyword of keywords) {\n    const response = await fetch(\n      `${urlPrefix}/dataset/hn/ts/${resolution}/${encodeURIComponent(\n        keyword,\n      )}.json`,\n    );\n\n    result[keyword] = await response.json();\n  }\n\n  return result;\n};\n\nexport const fetchPresets = async (): Promise<Presets> => {\n  const response = await fetch(`${urlPrefix}/dataset/hn/presets.json`);\n\n  return await response.json();\n};\n\nexport const defaultResolution = \"M\";\n\nexport const defaultKeywords = [\n  \"facebook\",\n  \"amazon\",\n  \"apple\",\n  \"netflix\",\n  \"google\",\n];\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  h1: { fontSize: \"2rem\" },\n  panel: {\n    padding: theme.spacing(3),\n  },\n  main: {\n    marginTop: theme.spacing(3),\n  },\n  input: {\n    width: \"100%\",\n    minWidth: \"120px\",\n  },\n  plotContainer: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  toolbar: {\n    flexDirection: \"row\",\n  },\n}));\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useStyles from \"./useStyles\";\n\nexport default () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar className={classes.toolbar}>\n        <Typography className={classes.h1} variant=\"h1\">\n          HN Trends of the Past Decade\n        </Typography>\n\n        <Button href=\"https://github.com/nvbn/hn-past-decade\">github</Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { SizeMe } from \"react-sizeme\";\nimport useStyles from \"./useStyles\";\nimport { TSKeywords } from \"../../data\";\n\nexport default ({ tsKeywords }: { tsKeywords: TSKeywords }) => {\n  const classes = useStyles();\n\n  return (\n    <Paper>\n      <div className={classes.plotContainer}>\n        <SizeMe>\n          {({ size }) => (\n            <Plot\n              data={Object.keys(tsKeywords).map(keyword => ({\n                type: \"scatter\",\n                mode: \"lines\",\n                name: keyword,\n                x: tsKeywords[keyword].map(([created, _]) => created),\n                y: tsKeywords[keyword].map(([_, rank]) => rank),\n              }))}\n              layout={{ width: size.width || 0, height: size.height || 0 }}\n            />\n          )}\n        </SizeMe>\n      </div>\n    </Paper>\n  );\n};\n","import React, { useState, useCallback } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { MultipleSelect } from \"react-select-material-ui\";\nimport { RankedKeyword, Presets } from \"../../data\";\nimport useStyles from \"./useStyles\";\n\nexport default ({\n  initialResolution,\n  initialSelected,\n  onResolutionChange,\n  onSelectedChange,\n  rankedKeywords,\n  presets,\n}: {\n  initialResolution: string;\n  initialSelected: string[];\n  onResolutionChange: (resolution: string) => void;\n  onSelectedChange: (selected: string[]) => void;\n  rankedKeywords: RankedKeyword[];\n  presets: Presets;\n}) => {\n  const classes = useStyles();\n\n  const [resolution, setResolution] = useState(initialResolution);\n  const changeResolution = useCallback(\n    (event: React.ChangeEvent<{ value: unknown }>) => {\n      const newResolution = event.target.value as string;\n      setResolution(newResolution);\n      onResolutionChange(newResolution);\n    },\n    [onResolutionChange, setResolution],\n  );\n\n  const [selected, setSelected] = useState(initialSelected);\n  const changeSelected = useCallback(\n    (values: string[]) => {\n      setSelected(values);\n      onSelectedChange(values);\n    },\n    [onSelectedChange, setSelected],\n  );\n\n  const changeSelectedPreset = useCallback(\n    (event: React.ChangeEvent<{ value: unknown }>) => {\n      const values = event.target.value as string[];\n      setSelected(values);\n      onSelectedChange(values);\n    },\n    [onSelectedChange, setSelected],\n  );\n\n  return (\n    <Paper className={classes.panel}>\n      <div>\n        <FormControl>\n          <InputLabel id=\"resolution-label\">Resolution</InputLabel>\n          <Select\n            labelId=\"resolution-label\"\n            value={resolution}\n            onChange={changeResolution}\n            className={classes.input}\n          >\n            <MenuItem value=\"D\">Day</MenuItem>\n            <MenuItem value=\"W\">Week</MenuItem>\n            <MenuItem value=\"M\">Month</MenuItem>\n            <MenuItem value=\"Q\">Quarter</MenuItem>\n            <MenuItem value=\"Y\">Year</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n      <br />\n      <div>\n        <FormControl className={classes.input}>\n          <MultipleSelect\n            label=\"Keywords\"\n            options={rankedKeywords.map(([keyword, _]) => keyword)}\n            values={selected}\n            onChange={changeSelected}\n          />\n        </FormControl>\n      </div>\n      <br />\n      <div>\n        <FormControl>\n          <InputLabel id=\"preset-label\">Preset</InputLabel>\n          <Select\n            labelId=\"preset-label\"\n            onChange={changeSelectedPreset}\n            className={classes.input}\n            value={selected}\n            displayEmpty\n          >\n            {Object.keys(presets).map(preset => (\n              <MenuItem value={presets[preset]}>{preset}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n    </Paper>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport {\n  fetchTSKeywords,\n  TSKeywords,\n  fetchRankedKeyword,\n  RankedKeyword,\n  defaultResolution,\n  defaultKeywords,\n  fetchPresets,\n  Presets,\n} from \"../../data\";\nimport Header from \"./Header\";\nimport Graph from \"./Graph\";\nimport Options from \"./Options\";\nimport useStyles from \"./useStyles\";\n\nexport default () => {\n  const classes = useStyles();\n\n  const location = useLocation();\n  const locationParams = new URLSearchParams(location.search);\n  const res = locationParams.get(\"res\");\n  const kws = locationParams.get(\"kws\");\n  const { push } = useHistory();\n\n  const [rankedKeywords, setRankedKeywords] = useState<RankedKeyword[]>();\n  useEffect(() => {\n    fetchRankedKeyword().then(setRankedKeywords);\n  }, []);\n\n  const [presets, setPresets] = useState<Presets>();\n  useEffect(() => {\n    fetchPresets().then(setPresets);\n  }, []);\n\n  const [resolution, setResolution] = useState(res || defaultResolution);\n  const [selected, setSelected] = useState(\n    kws ? kws.split(\",\") : defaultKeywords,\n  );\n\n  useEffect(() => {\n    const params = new URLSearchParams();\n    params.set(\"res\", resolution);\n    params.set(\"kws\", selected.join(\",\"));\n    push(`${window.location.pathname}?${params.toString()}`);\n  }, [push, resolution, selected]);\n\n  const [tsKeywords, setTSKeywords] = useState<TSKeywords>();\n  useEffect(() => {\n    setTSKeywords(undefined);\n\n    fetchTSKeywords(resolution, selected).then(setTSKeywords);\n  }, [resolution, selected]);\n\n  return (\n    <div className={classes.root}>\n      <Header />\n\n      <main className={classes.main}>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={3}>\n            <Grid item md={3} xs={12}>\n              {rankedKeywords && presets ? (\n                <Options\n                  initialResolution={resolution}\n                  onResolutionChange={setResolution}\n                  initialSelected={selected}\n                  onSelectedChange={setSelected}\n                  rankedKeywords={rankedKeywords}\n                  presets={presets}\n                />\n              ) : (\n                <LinearProgress />\n              )}\n            </Grid>\n\n            <Grid item md={9} xs={12}>\n              {tsKeywords ? (\n                <Graph tsKeywords={tsKeywords} />\n              ) : (\n                <LinearProgress />\n              )}\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport DashboardScreen from \"./components/DashboardScreen\";\n\nconst App: React.FC = () => (\n  <Router>\n    <Switch>\n      <Route children={<DashboardScreen />} />\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}