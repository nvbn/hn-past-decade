{"version":3,"sources":["constants.ts","components/DashboardScreen/styles.ts","components/DashboardScreen/Header.tsx","components/DashboardScreen/Graph.tsx","components/DashboardScreen/Options.tsx","components/DashboardScreen/index.tsx","data.ts","App.tsx","index.tsx"],"names":["defaultKeywords","urlPrefix","RESOLUTION_TO_NAME","D","W","M","Q","Y","useStyles","makeStyles","theme","root","display","flexDirection","height","h1","fontSize","panel","padding","spacing","main","marginTop","input","width","minWidth","plotContainer","minHeight","toolbar","classes","AppBar","position","Toolbar","className","Typography","variant","Button","href","tsKeywords","dates","useState","setWidth","setHeight","containerRef","useRef","resize","useCallback","current","bounding","getBoundingClientRect","plotHeight","document","documentElement","clientHeight","top","useEffect","useLayoutEffect","window","addEventListener","removeEventListener","Paper","ref","data","Object","keys","map","keyword","type","mode","name","x","y","layout","title","join","keywordsToPresetKey","keywords","sort","initialResolution","initialSelected","onResolutionChange","onSelectedChange","rankedKeywords","presets","resolution","setResolution","changeResolution","event","newResolution","target","value","selectedToPreset","useMemo","Map","presetName","selected","setSelected","get","selectedPreset","setSelectedPreset","changeSelected","values","changeSelectedPreset","preset","FormControl","InputLabel","id","Select","labelId","onChange","constants","MenuItem","key","label","options","displayEmpty","location","useLocation","locationParams","URLSearchParams","search","res","kws","push","useHistory","setRankedKeywords","a","async","fetch","response","json","fetchRankedKeyword","then","setPresets","fetchPresets","split","setDates","fetchResolutionDates","params","set","pathname","toString","setTSKeywords","undefined","result","encodeURIComponent","fetchTSKeywords","Header","Container","maxWidth","Grid","container","item","md","xs","Options","LinearProgress","Graph","App","children","DashboardScreen","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.05cb97d4.chunk.js","sourcesContent":["export const defaultResolution = \"M\";\n\nexport const defaultKeywords = [\n  \"facebook\",\n  \"amazon\",\n  \"apple\",\n  \"netflix\",\n  \"google\",\n];\n\nexport const urlPrefix =\n  process.env.NODE_ENV === \"production\" ? \"/hn-past-decade\" : \"\";\n\nexport const KEYWORDS_URL_PARAM = \"kws\";\n\nexport const RESOLUTION_URL_PARAM = \"res\";\n\nexport const RESOLUTION_TO_NAME: { [key: string]: string } = {\n  D: \"Day\",\n  W: \"Week\",\n  M: \"Month\",\n  Q: \"Quarter\",\n  Y: \"Year\",\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const MIN_PLOT_HEIGHT = 400;\n\nexport const PLOT_MARGIN = 32;\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\",\n  },\n  h1: { fontSize: \"2rem\" },\n  panel: {\n    padding: theme.spacing(3),\n  },\n  main: {\n    marginTop: theme.spacing(3),\n    height: \"100%\",\n  },\n  input: {\n    width: \"100%\",\n    minWidth: \"120px\",\n  },\n  plotContainer: {\n    width: \"100%\",\n    height: \"100%\",\n    minHeight: `${MIN_PLOT_HEIGHT}px`,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n  },\n}));\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useStyles } from \"./styles\";\n\nexport default () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar className={classes.toolbar}>\n        <Typography className={classes.h1} variant=\"h1\">\n          HN Trends of the Past Decade\n        </Typography>\n\n        <Button href=\"https://github.com/nvbn/hn-past-decade\">github</Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React, {\n  useState,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n  useEffect,\n} from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { TSKeywords } from \"../../types\";\nimport { useStyles, MIN_PLOT_HEIGHT, PLOT_MARGIN } from \"./styles\";\n\ntype Props = {\n  tsKeywords: TSKeywords;\n  dates: string[];\n};\n\nexport default ({ tsKeywords, dates }: Props) => {\n  const classes = useStyles();\n\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const resize = useCallback(() => {\n    if (containerRef.current === null) {\n      return;\n    }\n\n    const bounding = containerRef.current.getBoundingClientRect();\n    let plotHeight =\n      document.documentElement.clientHeight - bounding.top - PLOT_MARGIN;\n    if (plotHeight < MIN_PLOT_HEIGHT) {\n      plotHeight = MIN_PLOT_HEIGHT;\n    }\n\n    setHeight(plotHeight);\n    setWidth(bounding.width);\n  }, [containerRef]);\n\n  useEffect(resize, [containerRef]);\n  useLayoutEffect(() => {\n    window.addEventListener(\"resize\", resize);\n\n    return () => window.removeEventListener(\"resize\", resize);\n  }, [resize]);\n\n  return (\n    <Paper>\n      <div className={classes.plotContainer} ref={containerRef}>\n        <Plot\n          data={Object.keys(tsKeywords).map(keyword => ({\n            type: \"scatter\",\n            mode: \"lines\",\n            name: keyword,\n            x: dates,\n            y: tsKeywords[keyword],\n          }))}\n          layout={{ width, height, title: Object.keys(tsKeywords).join(\", \") }}\n        />\n      </div>\n    </Paper>\n  );\n};\n","import React, { useState, useCallback, useMemo } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { MultipleSelect } from \"react-select-material-ui\";\nimport { RankedKeyword, Presets } from \"../../types\";\nimport * as constants from \"../../constants\";\nimport { useStyles } from \"./styles\";\n\nconst keywordsToPresetKey = (keywords: string[]) => keywords.sort().join(\",\");\n\ntype Props = {\n  initialResolution: string;\n  initialSelected: string[];\n  onResolutionChange: (resolution: string) => void;\n  onSelectedChange: (selected: string[]) => void;\n  rankedKeywords: RankedKeyword[];\n  presets: Presets;\n};\n\nexport default ({\n  initialResolution,\n  initialSelected,\n  onResolutionChange,\n  onSelectedChange,\n  rankedKeywords,\n  presets,\n}: Props) => {\n  const classes = useStyles();\n\n  const [resolution, setResolution] = useState(initialResolution);\n  const changeResolution = useCallback(\n    (event: React.ChangeEvent<{ value: unknown }>) => {\n      const newResolution = event.target.value as string;\n      setResolution(newResolution);\n      onResolutionChange(newResolution);\n    },\n    [onResolutionChange, setResolution],\n  );\n\n  const selectedToPreset = useMemo(\n    () =>\n      new Map(\n        Object.keys(presets).map(presetName => [\n          keywordsToPresetKey(presets[presetName]),\n          presetName,\n        ]),\n      ),\n    [presets],\n  );\n\n  const [selected, setSelected] = useState(initialSelected);\n  const [selectedPreset, setSelectedPreset] = useState(\n    selectedToPreset.get(keywordsToPresetKey(selected)),\n  );\n  const changeSelected = useCallback(\n    (values: string[]) => {\n      setSelected(values);\n      onSelectedChange(values);\n      setSelectedPreset(selectedToPreset.get(keywordsToPresetKey(values)));\n    },\n    [onSelectedChange, setSelected, selectedToPreset],\n  );\n\n  const changeSelectedPreset = useCallback(\n    (event: React.ChangeEvent<{ value: unknown }>) => {\n      const preset = event.target.value as string;\n      setSelected(presets[preset]);\n      onSelectedChange(presets[preset]);\n      setSelectedPreset(preset);\n    },\n    [onSelectedChange, setSelected, presets],\n  );\n\n  return (\n    <Paper className={classes.panel}>\n      <div>\n        <FormControl>\n          <InputLabel id=\"resolution-label\">Resolution</InputLabel>\n          <Select\n            labelId=\"resolution-label\"\n            value={resolution}\n            onChange={changeResolution}\n            className={classes.input}\n          >\n            {Object.keys(constants.RESOLUTION_TO_NAME).map(resolution => (\n              <MenuItem value={resolution} key={`item-${resolution}`}>\n                {constants.RESOLUTION_TO_NAME[resolution]}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n      <br />\n      <div>\n        <FormControl className={classes.input}>\n          <MultipleSelect\n            label=\"Keywords\"\n            options={rankedKeywords.map(([keyword, _]) => keyword)}\n            values={selected}\n            onChange={changeSelected}\n          />\n        </FormControl>\n      </div>\n      <br />\n      <div>\n        <FormControl>\n          <InputLabel id=\"preset-label\">Preset</InputLabel>\n          <Select\n            labelId=\"preset-label\"\n            onChange={changeSelectedPreset}\n            className={classes.input}\n            value={selectedPreset || \"\"}\n            displayEmpty\n          >\n            {Object.keys(presets).map(preset => (\n              <MenuItem value={preset} key={`preset-${preset}`}>\n                {preset}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n    </Paper>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport {\n  fetchTSKeywords,\n  fetchRankedKeyword,\n  fetchPresets,\n  fetchResolutionDates,\n} from \"../../data\";\nimport { TSKeywords, RankedKeyword, Presets } from \"../../types\";\nimport * as constants from \"../../constants\";\nimport Header from \"./Header\";\nimport Graph from \"./Graph\";\nimport Options from \"./Options\";\nimport { useStyles } from \"./styles\";\n\nexport default () => {\n  const classes = useStyles();\n\n  const location = useLocation();\n  const locationParams = new URLSearchParams(location.search);\n  const res = locationParams.get(constants.RESOLUTION_URL_PARAM);\n  const kws = locationParams.get(constants.KEYWORDS_URL_PARAM);\n  const { push } = useHistory();\n\n  const [rankedKeywords, setRankedKeywords] = useState<RankedKeyword[]>();\n  useEffect(() => {\n    fetchRankedKeyword().then(setRankedKeywords);\n  }, []);\n\n  const [presets, setPresets] = useState<Presets>();\n  useEffect(() => {\n    fetchPresets().then(setPresets);\n  }, []);\n\n  const [resolution, setResolution] = useState(\n    res || constants.defaultResolution,\n  );\n  const [selected, setSelected] = useState(\n    kws ? kws.split(\",\") : constants.defaultKeywords,\n  );\n\n  const [dates, setDates] = useState<string[]>();\n  useEffect(() => {\n    fetchResolutionDates(resolution).then(setDates);\n  }, [resolution]);\n\n  useEffect(() => {\n    const params = new URLSearchParams();\n    params.set(constants.RESOLUTION_URL_PARAM, resolution);\n    params.set(constants.KEYWORDS_URL_PARAM, selected.join(\",\"));\n    push(`${window.location.pathname}?${params.toString()}`);\n  }, [push, resolution, selected]);\n\n  const [tsKeywords, setTSKeywords] = useState<TSKeywords>();\n  useEffect(() => {\n    setTSKeywords(undefined);\n\n    fetchTSKeywords(resolution, selected).then(setTSKeywords);\n  }, [resolution, selected]);\n\n  return (\n    <div className={classes.root}>\n      <Header />\n\n      <main className={classes.main}>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={3}>\n            <Grid item md={3} xs={12}>\n              {rankedKeywords && presets ? (\n                <Options\n                  initialResolution={resolution}\n                  onResolutionChange={setResolution}\n                  initialSelected={selected}\n                  onSelectedChange={setSelected}\n                  rankedKeywords={rankedKeywords}\n                  presets={presets}\n                />\n              ) : (\n                <LinearProgress />\n              )}\n            </Grid>\n\n            <Grid item md={9} xs={12}>\n              {tsKeywords && dates ? (\n                <Graph tsKeywords={tsKeywords} dates={dates} />\n              ) : (\n                <LinearProgress />\n              )}\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n};\n","import * as constants from \"./constants\";\nimport { TSKeywords, RankedKeyword, Presets } from \"./types\";\n\nexport const fetchRankedKeyword = async (): Promise<RankedKeyword[]> => {\n  const response = await fetch(\n    `${constants.urlPrefix}/dataset/hn/keywords.json`,\n  );\n\n  return await response.json();\n};\n\nexport const fetchTSKeywords = async (\n  resolution: string,\n  keywords: string[],\n): Promise<TSKeywords> => {\n  const result: TSKeywords = {};\n\n  for (const keyword of keywords) {\n    const response = await fetch(\n      `${constants.urlPrefix}/dataset/hn/ts/${resolution}/${encodeURIComponent(\n        keyword,\n      )}.json`,\n    );\n\n    result[keyword] = await response.json();\n  }\n\n  return result;\n};\n\nexport const fetchPresets = async (): Promise<Presets> => {\n  const response = await fetch(\n    `${constants.urlPrefix}/dataset/hn/presets.json`,\n  );\n\n  return await response.json();\n};\n\nexport const fetchResolutionDates = async (\n  resolution: string,\n): Promise<string[]> => {\n  const response = await fetch(\n    `${constants.urlPrefix}/dataset/hn/ts/${resolution}_dates.json`,\n  );\n\n  return await response.json();\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport DashboardScreen from \"./components/DashboardScreen\";\n\nconst App: React.FC = () => (\n  <Router>\n    <Switch>\n      <Route children={<DashboardScreen />} />\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}