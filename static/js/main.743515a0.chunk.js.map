{"version":3,"sources":["data.ts","components/DashboardScreen/useStyles.ts","components/DashboardScreen/Header.tsx","components/DashboardScreen/Graph.tsx","components/DashboardScreen/Options.tsx","components/DashboardScreen/index.tsx","App.tsx","index.tsx"],"names":["urlPrefix","defaultKeywords","makeStyles","theme","root","display","flexDirection","h1","fontSize","panel","padding","spacing","main","marginTop","input","width","minWidth","plotContainer","height","minHeight","toolbar","classes","useStyles","AppBar","position","Toolbar","className","Typography","variant","Button","href","tsKeywords","dates","useState","setWidth","setHeight","containerRef","useRef","resize","useCallback","current","bounding","getBoundingClientRect","useLayoutEffect","window","addEventListener","removeEventListener","Paper","ref","data","Object","keys","map","keyword","type","mode","name","x","y","layout","keywordsToPresetKey","keywords","sort","join","initialResolution","initialSelected","onResolutionChange","onSelectedChange","rankedKeywords","presets","resolution","setResolution","changeResolution","event","newResolution","target","value","selectedToPreset","useMemo","Map","presetName","selected","setSelected","get","selectedPreset","setSelectedPreset","changeSelected","values","changeSelectedPreset","preset","FormControl","InputLabel","id","Select","labelId","onChange","MenuItem","label","options","displayEmpty","key","location","useLocation","locationParams","URLSearchParams","search","res","kws","push","useHistory","setRankedKeywords","useEffect","a","async","fetch","response","json","fetchRankedKeyword","then","setPresets","fetchPresets","split","setDates","fetchResolutionDates","params","set","pathname","toString","setTSKeywords","undefined","result","encodeURIComponent","fetchTSKeywords","Header","Container","maxWidth","Grid","container","item","md","xs","Options","LinearProgress","Graph","App","children","DashboardScreen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.743515a0.chunk.js","sourcesContent":["export type TSKeywords = {\n  [keyword: string]: number[];\n};\n\nexport type RankedKeyword = [string, number];\n\nexport type Presets = {\n  [name: string]: string[];\n};\n\nexport const fetchRankedKeyword = async (): Promise<RankedKeyword[]> => {\n  const response = await fetch(`${urlPrefix}/dataset/hn/keywords.json`);\n\n  return await response.json();\n};\n\nconst urlPrefix =\n  process.env.NODE_ENV === \"production\" ? \"/hn-past-decade\" : \"\";\n\nexport const fetchTSKeywords = async (\n  resolution: string,\n  keywords: string[],\n): Promise<TSKeywords> => {\n  const result: TSKeywords = {};\n\n  for (const keyword of keywords) {\n    const response = await fetch(\n      `${urlPrefix}/dataset/hn/ts/${resolution}/${encodeURIComponent(\n        keyword,\n      )}.json`,\n    );\n\n    result[keyword] = await response.json();\n  }\n\n  return result;\n};\n\nexport const fetchPresets = async (): Promise<Presets> => {\n  const response = await fetch(`${urlPrefix}/dataset/hn/presets.json`);\n\n  return await response.json();\n};\n\nexport const fetchResolutionDates = async (\n  resolution: string,\n): Promise<string[]> => {\n  const response = await fetch(\n    `${urlPrefix}/dataset/hn/ts/${resolution}_dates.json`,\n  );\n\n  return await response.json();\n};\n\nexport const defaultResolution = \"M\";\n\nexport const defaultKeywords = [\n  \"facebook\",\n  \"amazon\",\n  \"apple\",\n  \"netflix\",\n  \"google\",\n];\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  h1: { fontSize: \"2rem\" },\n  panel: {\n    padding: theme.spacing(3),\n  },\n  main: {\n    marginTop: theme.spacing(3),\n  },\n  input: {\n    width: \"100%\",\n    minWidth: \"120px\",\n  },\n  plotContainer: {\n    width: \"100%\",\n    height: \"100%\",\n    minHeight: \"400px\",\n  },\n  toolbar: {\n    flexDirection: \"row\",\n  },\n}));\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useStyles from \"./useStyles\";\n\nexport default () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar className={classes.toolbar}>\n        <Typography className={classes.h1} variant=\"h1\">\n          HN Trends of the Past Decade\n        </Typography>\n\n        <Button href=\"https://github.com/nvbn/hn-past-decade\">github</Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React, { useState, useCallback, useLayoutEffect, useRef } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport Paper from \"@material-ui/core/Paper\";\nimport useStyles from \"./useStyles\";\nimport { TSKeywords } from \"../../data\";\n\nexport default ({\n  tsKeywords,\n  dates,\n}: {\n  tsKeywords: TSKeywords;\n  dates: string[];\n}) => {\n  const classes = useStyles();\n\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const resize = useCallback(() => {\n    if (containerRef.current === null) {\n      return;\n    }\n\n    const bounding = containerRef.current.getBoundingClientRect();\n\n    setHeight(bounding.height);\n    setWidth(bounding.width);\n  }, [containerRef]);\n\n  useCallback(resize, [containerRef]);\n  useLayoutEffect(() => {\n    window.addEventListener(\"resize\", resize);\n\n    return () => window.removeEventListener(\"resize\", resize);\n  }, [resize]);\n\n  return (\n    <Paper>\n      <div className={classes.plotContainer} ref={containerRef}>\n        <Plot\n          data={Object.keys(tsKeywords).map(keyword => ({\n            type: \"scatter\",\n            mode: \"lines\",\n            name: keyword,\n            x: dates,\n            y: tsKeywords[keyword],\n          }))}\n          layout={{ width, height }}\n        />\n      </div>\n    </Paper>\n  );\n};\n","import React, { useState, useCallback, useMemo } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { MultipleSelect } from \"react-select-material-ui\";\nimport { RankedKeyword, Presets } from \"../../data\";\nimport useStyles from \"./useStyles\";\n\nconst keywordsToPresetKey = (keywords: string[]) => keywords.sort().join(\",\");\n\nexport default ({\n  initialResolution,\n  initialSelected,\n  onResolutionChange,\n  onSelectedChange,\n  rankedKeywords,\n  presets,\n}: {\n  initialResolution: string;\n  initialSelected: string[];\n  onResolutionChange: (resolution: string) => void;\n  onSelectedChange: (selected: string[]) => void;\n  rankedKeywords: RankedKeyword[];\n  presets: Presets;\n}) => {\n  const classes = useStyles();\n\n  const [resolution, setResolution] = useState(initialResolution);\n  const changeResolution = useCallback(\n    (event: React.ChangeEvent<{ value: unknown }>) => {\n      const newResolution = event.target.value as string;\n      setResolution(newResolution);\n      onResolutionChange(newResolution);\n    },\n    [onResolutionChange, setResolution],\n  );\n\n  const selectedToPreset = useMemo(\n    () =>\n      new Map(\n        Object.keys(presets).map(presetName => [\n          keywordsToPresetKey(presets[presetName]),\n          presetName,\n        ]),\n      ),\n    [presets],\n  );\n\n  const [selected, setSelected] = useState(initialSelected);\n  const [selectedPreset, setSelectedPreset] = useState(\n    selectedToPreset.get(keywordsToPresetKey(selected)),\n  );\n  const changeSelected = useCallback(\n    (values: string[]) => {\n      setSelected(values);\n      onSelectedChange(values);\n      setSelectedPreset(selectedToPreset.get(keywordsToPresetKey(values)));\n    },\n    [onSelectedChange, setSelected, selectedToPreset],\n  );\n\n  const changeSelectedPreset = useCallback(\n    (event: React.ChangeEvent<{ value: unknown }>) => {\n      const preset = event.target.value as string;\n      setSelected(presets[preset]);\n      onSelectedChange(presets[preset]);\n      setSelectedPreset(preset);\n    },\n    [onSelectedChange, setSelected, presets],\n  );\n\n  return (\n    <Paper className={classes.panel}>\n      <div>\n        <FormControl>\n          <InputLabel id=\"resolution-label\">Resolution</InputLabel>\n          <Select\n            labelId=\"resolution-label\"\n            value={resolution}\n            onChange={changeResolution}\n            className={classes.input}\n          >\n            <MenuItem value=\"D\">Day</MenuItem>\n            <MenuItem value=\"W\">Week</MenuItem>\n            <MenuItem value=\"M\">Month</MenuItem>\n            <MenuItem value=\"Q\">Quarter</MenuItem>\n            <MenuItem value=\"Y\">Year</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n      <br />\n      <div>\n        <FormControl className={classes.input}>\n          <MultipleSelect\n            label=\"Keywords\"\n            options={rankedKeywords.map(([keyword, _]) => keyword)}\n            values={selected}\n            onChange={changeSelected}\n          />\n        </FormControl>\n      </div>\n      <br />\n      <div>\n        <FormControl>\n          <InputLabel id=\"preset-label\">Preset</InputLabel>\n          <Select\n            labelId=\"preset-label\"\n            onChange={changeSelectedPreset}\n            className={classes.input}\n            value={selectedPreset || \"\"}\n            displayEmpty\n          >\n            {Object.keys(presets).map(preset => (\n              <MenuItem value={preset} key={`preset-${preset}`}>\n                {preset}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n    </Paper>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport {\n  fetchTSKeywords,\n  TSKeywords,\n  fetchRankedKeyword,\n  RankedKeyword,\n  defaultResolution,\n  defaultKeywords,\n  fetchPresets,\n  Presets,\n  fetchResolutionDates,\n} from \"../../data\";\nimport Header from \"./Header\";\nimport Graph from \"./Graph\";\nimport Options from \"./Options\";\nimport useStyles from \"./useStyles\";\n\nexport default () => {\n  const classes = useStyles();\n\n  const location = useLocation();\n  const locationParams = new URLSearchParams(location.search);\n  const res = locationParams.get(\"res\");\n  const kws = locationParams.get(\"kws\");\n  const { push } = useHistory();\n\n  const [rankedKeywords, setRankedKeywords] = useState<RankedKeyword[]>();\n  useEffect(() => {\n    fetchRankedKeyword().then(setRankedKeywords);\n  }, []);\n\n  const [presets, setPresets] = useState<Presets>();\n  useEffect(() => {\n    fetchPresets().then(setPresets);\n  }, []);\n\n  const [resolution, setResolution] = useState(res || defaultResolution);\n  const [selected, setSelected] = useState(\n    kws ? kws.split(\",\") : defaultKeywords,\n  );\n\n  const [dates, setDates] = useState<string[]>();\n  useEffect(() => {\n    fetchResolutionDates(resolution).then(setDates);\n  }, [resolution]);\n\n  useEffect(() => {\n    const params = new URLSearchParams();\n    params.set(\"res\", resolution);\n    params.set(\"kws\", selected.join(\",\"));\n    push(`${window.location.pathname}?${params.toString()}`);\n  }, [push, resolution, selected]);\n\n  const [tsKeywords, setTSKeywords] = useState<TSKeywords>();\n  useEffect(() => {\n    setTSKeywords(undefined);\n\n    fetchTSKeywords(resolution, selected).then(setTSKeywords);\n  }, [resolution, selected]);\n\n  return (\n    <div className={classes.root}>\n      <Header />\n\n      <main className={classes.main}>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={3}>\n            <Grid item md={3} xs={12}>\n              {rankedKeywords && presets ? (\n                <Options\n                  initialResolution={resolution}\n                  onResolutionChange={setResolution}\n                  initialSelected={selected}\n                  onSelectedChange={setSelected}\n                  rankedKeywords={rankedKeywords}\n                  presets={presets}\n                />\n              ) : (\n                <LinearProgress />\n              )}\n            </Grid>\n\n            <Grid item md={9} xs={12}>\n              {tsKeywords && dates ? (\n                <Graph tsKeywords={tsKeywords} dates={dates} />\n              ) : (\n                <LinearProgress />\n              )}\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport DashboardScreen from \"./components/DashboardScreen\";\n\nconst App: React.FC = () => (\n  <Router>\n    <Switch>\n      <Route children={<DashboardScreen />} />\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}